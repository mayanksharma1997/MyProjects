{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bikeshare Project\n",
    "\n",
    "---\n",
    "#### Problem Statement     \n",
    "     By increasing the number of bikes we make at a rate of one bike per day over a thirty day period and supply them to our consumers, will we see the number of active bike users grow?\n",
    "    \n",
    "---\n",
    "#### NYC Traffic Background\n",
    "    \n",
    "       NYC is known to be one of the busiest cities in the world. On average, people commuting in NYC \n",
    "       spend approximately 140 hours in traffic over a year. \n",
    "       \n",
    "##### BEST TIME TO AVOID\n",
    "What day of the week had the worst rush hour?\n",
    "\n",
    "    Friday, 5 PM - 6 PM\n",
    "       \n",
    "       \n",
    "##### Weekly Traffic Congestion By Time Of Day\n",
    "|   Time Of Day     | Sun | Mon | Tue | Wed | Thurs | Fri | Sat |\n",
    "|--------|-----|-----|-----|-----|-------|-----|-----|\n",
    "| 12:00 am |16%|7%|8%|8%|9%|13%|16%|\n",
    "| 01:00 am |10%|4%|5%|5%|5%|7%|11%|\n",
    "| 02:00 am |7%|2%|3%|3%|3%|4%|7%|\n",
    "| 03:00 am |4%|1%|1%|1%|1%|2%|5%|\n",
    "| 04:00 am |3%|0%|0%|0%|0%|1%|3%|\n",
    "| 05:00 am |1%|6%|7%|6%|6%|6%|2%|\n",
    "| 06:00 am |0%|26%|28%|27%|28%|24%|4%|\n",
    "| 07:00 am |1%|46%|51%|49%|50%|42%|7%|\n",
    "| 08:00 am |4%|52%|58%|55%|58%|47%|12%|\n",
    "| 09:00 am |8%|39%|44%|42%|45%|36%|18%|\n",
    "| 10:00 am |14%|32%|36%|35%|37%|33%|24%|\n",
    "| 11:00 am |21%|31%|33%|33%|36%|35%|31%|\n",
    "| 12:00 pm |27%|32%|33%|34%|36%|38%|36%|\n",
    "| 01:00 pm |33%|33%|34%|35%|37%|42%|38%|\n",
    "| 02:00 pm |36%|40%|40%|44%|46%|55%|40%|\n",
    "| 03:00 pm |38%|49%|52%|59%|60%|71%|42%|\n",
    "| 04:00 pm |39%|57%|61%|66%|69%|76%|43%|\n",
    "| 05:00 pm |39%|61%|66%|72%|75%|76%|44%|\n",
    "| 06:00 pm |36%|47%|52%|58%|62%|61%|41%|\n",
    "| 07:00 pm |31%|29%|32%|36%|41%|42%|35%|\n",
    "| 08:00 pm |28%|20%|22%|26%|30%|30%|29%|\n",
    "| 09:00 pm |23%|16%|18%|21%|24%|25%|25%|\n",
    "| 10:00 pm |17%|13%|15%|18%|21%|23%|23%|\n",
    "| 11:00 pm |11%|10%|12%|14%|17%|21%|21%|\n",
    "       \n",
    "\n",
    "       \n",
    "       \n",
    "       [New York Traffic Report]: https://www.tomtom.com/en_gb/traffic-index/new-york-traffic\n",
    "\n",
    "---\n",
    "\n",
    "\n",
    "\n",
    "# Making This Work For Our Bike Simulation\n",
    "\n",
    "\n",
    "### How This Affects Our Bike Simulation\n",
    "\n",
    "    Since we have the average traffic congestion for a day and the time of that day, we're going to model these\n",
    "    numbers for our bike simulation. So this is what we're going to do,\n",
    "    \n",
    "    Let's take Sunday at 12:00am as an example: 16%\n",
    "    \n",
    "    There's a 16% that you'll end up facing traffic. Converting this to work for our bike simulation, \n",
    "    this percent tells us that there's a 16% chance someone might need to ride from one location to another.\n",
    "    Why? Because people are more than likely not going to be commutting at 12:00am.The lower the percentage, \n",
    "    the lower someone may need to travel from point A to point B and vice versa.\n",
    "    \n",
    "---\n",
    "\n",
    "### Making This Work With Our Problem Statement\n",
    "\n",
    "    So now we know that each percentage indicates a persons desire to ride at a given time and day. By\n",
    "    simulating this over a 30 day period, we want to find out if by adding a new bike into our system per\n",
    "    day, could this potentially lead to an increase in total active bike users.\n",
    "    \n",
    "    \n",
    "    Q: Will the total active bike users continuously increase as we add in more bikes to our system?\n",
    "\n",
    "    \n",
    "    \n",
    "\n",
    "### Probability Of Needing To Ride A Bike Based On The Time And Day Of The Week\n",
    "\n",
    "|   Time Of Day     | Sun | Mon | Tue | Wed | Thurs | Fri | Sat |\n",
    "|--------|-----|-----|-----|-----|-------|-----|-----|\n",
    "| 12:00 am |16%|7%|8%|8%|9%|13%|16%|\n",
    "| 01:00 am |10%|4%|5%|5%|5%|7%|11%|\n",
    "| 02:00 am |7%|2%|3%|3%|3%|4%|7%|\n",
    "| 03:00 am |4%|1%|1%|1%|1%|2%|5%|\n",
    "| 04:00 am |3%|0%|0%|0%|0%|1%|3%|\n",
    "| 05:00 am |1%|6%|7%|6%|6%|6%|2%|\n",
    "| 06:00 am |0%|26%|28%|27%|28%|24%|4%|\n",
    "| 07:00 am |1%|46%|51%|49%|50%|42%|7%|\n",
    "| 08:00 am |4%|52%|58%|55%|58%|47%|12%|\n",
    "| 09:00 am |8%|39%|44%|42%|45%|36%|18%|\n",
    "| 10:00 am |14%|32%|36%|35%|37%|33%|24%|\n",
    "| 11:00 am |21%|31%|33%|33%|36%|35%|31%|\n",
    "| 12:00 pm |27%|32%|33%|34%|36%|38%|36%|\n",
    "| 01:00 pm |33%|33%|34%|35%|37%|42%|38%|\n",
    "| 02:00 pm |36%|40%|40%|44%|46%|55%|40%|\n",
    "| 03:00 pm |38%|49%|52%|59%|60%|71%|42%|\n",
    "| 04:00 pm |39%|57%|61%|66%|69%|76%|43%|\n",
    "| 05:00 pm |39%|61%|66%|72%|75%|76%|44%|\n",
    "| 06:00 pm |36%|47%|52%|58%|62%|61%|41%|\n",
    "| 07:00 pm |31%|29%|32%|36%|41%|42%|35%|\n",
    "| 08:00 pm |28%|20%|22%|26%|30%|30%|29%|\n",
    "| 09:00 pm |23%|16%|18%|21%|24%|25%|25%|\n",
    "| 10:00 pm |17%|13%|15%|18%|21%|23%|23%|\n",
    "| 11:00 pm |11%|10%|12%|14%|17%|21%|21%|\n",
    "\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pint in /Users/michaelteixeira/opt/anaconda3/lib/python3.7/site-packages (0.10.1)\r\n",
      "Requirement already satisfied: setuptools in /Users/michaelteixeira/opt/anaconda3/lib/python3.7/site-packages (from pint) (41.4.0)\r\n"
     ]
    }
   ],
   "source": [
    "# Install our necessary dependencies\n",
    "!pip install pint\n",
    "\n",
    "from modsim import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "# State object to keep track of our bikes and available bikes\n",
    "bikeshare = State(qc=8, qcc=8, free_bikes=0, total_free_bikes=0)\n",
    "\n",
    "# State object to keep track of our meta-data for\n",
    "bike_user_tracker = State(\n",
    "                    bikes_riden_per_day=[],\n",
    "                    rides_for_day=0,\n",
    "                    total_bikes=[],\n",
    "                    max_active_bike_users=0,\n",
    "                    low_active_bike_users=48)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Probability state object that holds all of our probabilities for the week\n",
    "probabilities = State(\n",
    "sunday = [.16,.10,.7,.4,.3,.1,.0,.1,.4,.8,.14,.21,.27,.33,.36,.38,.39,.39,.36,.31,.28,.23,.17,.11],\n",
    "monday = [.7,.4,.2,.1,.0,.6,.26,.46,.52,.39,.32,.31,.32,.33,.40,.49,.57,.61,.47,.29,.20,.16,.13, .10],\n",
    "tuesday = [.8,.5,.3,.1,.0,.7,.28,.51,.58,.44,.36,.33,.33,.34,.40,.52,.61,.66,.52,.32,.22,.18,.15,.12],\n",
    "wednesday = [.8,.5,.3,.1,.0,.6,.27,.49,.55,.42,.35,.33,.34,.35,.44,.59,.66,.72,.58,.36,.26,.21,.18,.14],\n",
    "thursday = [.9,.5,.3,.1,.0,.6,.28,.50,.58,.45,.37,.36,.36,.37,.46,.60,.69,.75,.62,.41,.30,.24,.21,.17],\n",
    "friday = [.13,.7,.4,.2,.1,.6,.24,.42,.47,.36,.33,.35,.38,.42,.55,.71,.76,.76,.61,.42,.30,.25,.23,.21],\n",
    "saturday = [.16,.11,.7,.5,.3,.2,.4,.7,.12,.18,.24,.31,.36,.38,.40,.42,.43,.44,.41,.35,.29,.25,.23,.21])\n",
    "\n",
    "\n",
    "# A list of the various venues that contain our bikeshare system where a person may ride to\n",
    "locations = [\"Queens College\", \"Queens Community College\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "    Ride a Bike from QCC to QC\n",
    "    \n",
    "    state: State object that contains qc, qcc, and free_bikes as state variables\n",
    "    bike_date_tracker: bike_data object that helps us keep track of our rides per day\n",
    "    locations: a list of locations we are using to simulate the bike route (QC, QCC)\n",
    "\n",
    "\"\"\"\n",
    "def bike_to_queens_college(state, bike_data_tracker, locations):\n",
    "    \n",
    "    \n",
    "    # If QCC is out of bikes, check if there are any available bikes\n",
    "    if state.qcc == 0:\n",
    "        transfer_available_bike(state, locations[0])\n",
    "        return\n",
    "    \n",
    "    # A trip has occured, transfer our person over and incr our daily bike rides\n",
    "    bike_data_tracker.rides_for_day += 1\n",
    "    state.qcc -= 1\n",
    "    state.qc += 1\n",
    "    \n",
    "     \n",
    "    \n",
    "\"\"\"\n",
    "    Ride a Bike from QC to QCC\n",
    "    \n",
    "    state: State object that contains qc, qcc, and free_bikes as state variables\n",
    "    bike_date_tracker: bike_data object that helps us keep track of our rides per day\n",
    "    locations: a list of locations we are using to simulate the bike route (QC, QCC)\n",
    "\"\"\"\n",
    "def bike_to_queens_community_college(state, bike_data_tracker, locations):\n",
    "    \n",
    "    # If QC is out of bikes, check if there are any available bikes\n",
    "    if state.qc == 0:\n",
    "        transfer_available_bike(state, locations[0])\n",
    "        return\n",
    "    \n",
    "    # A trip has occured, transfer our person over and incr our daily bike rides\n",
    "    bike_data_tracker.rides_for_day += 1\n",
    "    state.qc -= 1\n",
    "    state.qcc += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "    Adds a new bike to our bikeshare object by adding it to the free_bike state variable\n",
    "    If a location reaches 0 bikes and a customer needs a new bike, the bike gets transferred over to that \n",
    "    location for use\n",
    "    \n",
    "    state: State object that contains qc, qcc, and free_bikes as state variables\n",
    "    location: a specific value from our locations list that is either (QC, QCC)\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def transfer_available_bike(state, location):\n",
    "    \n",
    "    #If there are no free bikes return, we can't transfer an empty bike\n",
    "    if state.free_bikes == 0:\n",
    "        return\n",
    "    \n",
    "    # Transfer the bike over and have the person ride from QCC to QC\n",
    "    if location == \"Queens Community College\":\n",
    "        state.qc += 1\n",
    "        state.free_bikes -= 1 \n",
    "    \n",
    "    # Transfer the bike over and have the person ride from QC to QCC \n",
    "    if location == \"Queens College\":\n",
    "        state.qcc += 1\n",
    "        state.free_bikes -= 1  \n",
    "        \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "    Simulates the possibility of someone riding a bike based on the prob  \n",
    "\n",
    "    state: State object that contains qc, qcc, and free_bikes as state variables\n",
    "    prob: the chance of a person riding a bike \n",
    "    bike_date_tracker: bike_data object that helps us keep track of our rides per day\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "def step(state, prob, bike_data_tracker, locations):\n",
    "    \n",
    "    if flip(prob):\n",
    "        bike_to_queens_college(state, bike_data_tracker, locations)\n",
    "        \n",
    "    if flip(prob):\n",
    "        bike_to_queens_community_college(state, bike_data_tracker, locations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "    After a full day of cycling, we track our daily results\n",
    "    \n",
    "    state: State object that contains qc, qcc, and free_bikes as state variables\n",
    "    bike_date_tracker: bike_data object that helps us keep track of our rides per day\n",
    "\"\"\"\n",
    "\n",
    "def set_new_day(state, bike_data_tracker):\n",
    "    \n",
    "    # Store our total bikes for the given day\n",
    "    bike_data_tracker.total_bikes.append(state.qc + state.qcc)\n",
    "    \n",
    "    # Store the total number of active users for the day\n",
    "    bike_data_tracker.bikes_riden_per_day.append(bike_data_tracker.rides_for_day)\n",
    "    \n",
    "    # If we've reached a day where the total daily users is greater than the current max active users, set the new max\n",
    "    if bike_data_tracker.rides_for_day > bike_data_tracker.max_active_bike_users:\n",
    "        bike_data_tracker.max_active_bike_users = bike_data_tracker.rides_for_day\n",
    "        \n",
    "    if bike_data_tracker.rides_for_day < bike_data_tracker.low_active_bike_users:\n",
    "        bike_data_tracker.low_active_bike_users = bike_data_tracker.rides_for_day\n",
    "    \n",
    "    # Reset our rides for the day to 0 since it's a new day\n",
    "    bike_data_tracker.rides_for_day = 0\n",
    "    \n",
    "    # Add a new available bike after the day has finished\n",
    "    bikeshare.free_bikes += 1\n",
    "    \n",
    "    # Keep track of the total amount of bikes added throughout our simulation\n",
    "    bikeshare.total_free_bikes += 1\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    " \"\"\"\n",
    "     A basic switch statement to determine which probability array we need to return based on the day of the week\n",
    "     \n",
    "     day_of_week: Integer between 0-6\n",
    "     return: a probabilitiy array\n",
    " \n",
    " \"\"\"\n",
    "    \n",
    "def determine_which_prob_to_use(day_of_week):\n",
    "\n",
    "    switcher={\n",
    "            0: probabilities.sunday,\n",
    "            1: probabilities.monday,\n",
    "            2: probabilities.tuesday,\n",
    "            3: probabilities.wednesday,\n",
    "            4: probabilities.thursday,\n",
    "            5: probabilities.friday,\n",
    "            6: probabilities.saturday\n",
    "    }\n",
    "    return switcher.get(day_of_week, \"Invalid Day of Week\")\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\"\"\"\n",
    "    A  function that simulates a 30 day period ----  30days = 720hours\n",
    "    \n",
    "    state: State object that contains qc, qcc, and free_bikes as state variables\n",
    "    bike_date_tracker: bike_data object that helps us keep track of our rides per day\n",
    "    \n",
    "\"\"\"\n",
    "\n",
    "def run_thirty_day_simulation(state, bike_data_tracker, locations, num_days):\n",
    "    \n",
    "    # convert our number of days into hours\n",
    "    hours = num_days * 24\n",
    "    \n",
    "    # track our days of the week\n",
    "    day_of_week = 0\n",
    "    \n",
    "    results = TimeSeries()\n",
    "    numberOfBikes = TimeSeries()\n",
    "    \n",
    "    for i in range(hours):\n",
    "        \n",
    "        #Determine our day of the week to get our proper probability\n",
    "        probabilities = determine_which_prob_to_use(day_of_week)\n",
    "        \n",
    "        #Get our probability based on the time of day\n",
    "        p = probabilities[i%24]\n",
    "\n",
    "        # Simulate 1 hour\n",
    "        step(state, p, bike_data_tracker, locations)\n",
    "\n",
    "\n",
    "        # (i % 24) == 0 means we've entered a new day since there are 24 hours in the day\n",
    "        # 0-23 represents 24 hours starting from hour 0 (12am)\n",
    "        if i % 24 == 0 and i > 0:\n",
    "            \n",
    "            # Need to keep day_of_week between 0-6 since it determines which prob for which day\n",
    "            day_of_week = (day_of_week + 1) % 6 \n",
    "            \n",
    "            # setup our variables for the next day\n",
    "            set_new_day(state, bike_data_tracker)\n",
    "            \n",
    "            # Give our TimeSeries object the number of free bikes added over the number of days\n",
    "            numberOfBikes[i//24 - 1] = bikeshare.total_free_bikes\n",
    "                \n",
    "    \n",
    "    # Give our TimeSeries object the number of bikes riden daily with a time stamp \n",
    "    for i in range(len(bike_data_tracker.bikes_riden_per_day)):\n",
    "        results[i] = bike_data_tracker.bikes_riden_per_day[i]\n",
    "        \n",
    "        \n",
    "    \n",
    "    # Label our graph\n",
    "    decorate(title=\"Total Number Of Bikes Riden Per Day\", xlabel=\"Day\", ylabel=\"Bikes\")\n",
    "\n",
    "    # Plot the number of bikes riden per day    \n",
    "    plot(results, label=\"Bikes Riden Per Day\")\n",
    "    \n",
    "    # Plot the total number of free bikes\n",
    "    plot(numberOfBikes, label=\"Bikes Added To System\")  \n",
    "    legend()\n",
    "    \n",
    "    savefig(\"figs/total_num_bikes_riden_per_day\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure to file figs/total_num_bikes_riden_per_day\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Simulate our scenario over a 30 day period and graph out our results\n",
    "\n",
    "run_thirty_day_simulation(bikeshare, bike_user_tracker, locations, 30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>qc</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>qcc</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>free_bikes</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_free_bikes</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "qc                  19\n",
       "qcc                  6\n",
       "free_bikes          20\n",
       "total_free_bikes    29\n",
       "dtype: int64"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the final outcome of the bikeshare state in our 30 day simulation\n",
    "\n",
    "bikeshare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>bikes_riden_per_day</td>\n",
       "      <td>[16, 15, 19, 18, 23, 17, 19, 12, 22, 17, 28, 2...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>rides_for_day</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_bikes</td>\n",
       "      <td>[16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max_active_bike_users</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>low_active_bike_users</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "bikes_riden_per_day      [16, 15, 19, 18, 23, 17, 19, 12, 22, 17, 28, 2...\n",
       "rides_for_day                                                           19\n",
       "total_bikes              [16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 1...\n",
       "max_active_bike_users                                                   28\n",
       "low_active_bike_users                                                   11\n",
       "dtype: object"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the final outcome of our bike_user_tracker state in our 30 day simulation \n",
    "\n",
    "bike_user_tracker"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
